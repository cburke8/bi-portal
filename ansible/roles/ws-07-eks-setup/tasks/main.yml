---
# tasks file for eks-setup

- name: create a folder for files
  file:
    path: "{{role_path}}/files"
    state: directory

- name: create a folder for this environment deployment
  file:
    path: "{{role_path}}/files/{{deployment_env_short}}"
    state: directory

- name: create deployment config files from templates
  template:
    src: "{{role_path}}/templates/{{item}}"
    dest: "{{role_path}}/files/{{deployment_env_short}}/{{item}}"
  loop:
    - grrf_configmap.yml
    - grrf_deployment.yml
    - grrf_service.yml

- name: set the cluster for kubectl
  shell: "aws eks --region {{aws_region}} update-kubeconfig --name {{eks_cluster_name}}"
  when: eks_type == "eks"

- name: create guardian-grrf namespace if doesnt exists
  k8s:
    api_version: v1
    kind: Namespace
    name: "{{eks_namespace}}"
    state: present
    wait: yes

# - name: remove previous service
#   k8s:
#     kind: Service
#     state: absent
#     namespace: "{{eks_namespace}}"
#     name: "vistra-{{deployment_env_short}}-weather-api"
#     wait: yes

- name: deploy
  k8s:
    state: present
    src: "{{role_path}}/files/{{deployment_env_short}}/{{item}}"
    wait: no
    wait_timeout: 600
  loop:
    - grrf_service.yml
    - grrf_configmap.yml
    - grrf_deployment.yml

# - shell: export TOKENNAME="kubectl  -n kube-system get serviceaccount/eks-admin -o jsonpath='{.secrets[0].name}'"
# - shell: export TOKEN="kubectl -n kube-system get secret $TOKENNAME -o jsonpath='{.data.token}' | base64 --decode "

# - shell: echo $TOKEN
#   register: shell_result

# - debug:
#     msg: "{{ shell_result.stdout }}"

- name: clean config files
  file:
    state: absent
    path: "{{ role_path }}/files"
  ignore_errors: yes