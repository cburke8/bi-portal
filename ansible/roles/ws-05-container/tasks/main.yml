---
# tasks file for container

# - name: delete project folder if exists
#   file:
#     path: "{{role_path}}/files/project"
#     state: absent


# - name: create directory for the project
#   file:
#     path: "{{role_path}}/files/project"
#     state: directory

# - name: clone the app
#   git:
#     repo: "{{project_repo}}"
#     dest: "{{role_path}}/files/project"
#     version: "{{project_version}}"
#     clone: yes
#   register: git_result
#   ignore_errors: yes


# - name: git result
#   debug:
#     msg: "{{git_result}}"
#   ignore_errors: yes

- block:
  ####################
    - name: Log into DockerHub
      docker_login:
        username: ""
        password: ""

    - name: build the image and push it to docker hub
      docker_image:
        build:
          # path: "{{role_path}}/files/project/"
          path: "{{role_path}}/../../../"
          dockerfile: Dockerfile
          pull: no
        name: "{{ecr_repository_uri}}:{{container_version}}"
        # repository: "{{ecr_repository_uri}}:{{container_version}}"
        push: yes
        source: build
      register: container_result

  ####################
  when: not ecr_private_repository

- block:
  ####################
    - name: login to the ECR
      shell: $( aws ecr get-login --no-include-email --region={{aws_region}} --registry-ids {{aws_account}})
      register: login_result

    - name: ECR login result
      debug:
        msg: "{{login_result}}"

    - name: build the image and push it to repository
      docker_image:
        build:
          # path: "{{role_path}}/files/project/"
          path: "{{role_path}}/../../../"
          dockerfile: Dockerfile
          pull: no
        name: "{{ecr_repository_uri}}"
        tag: "{{container_version}}"
        push: yes
        source: build
        state: present
      register: container_result


  ####################
  when: ecr_private_repository


- name: container image build result
  debug:
    msg: "{{container_result}}"


